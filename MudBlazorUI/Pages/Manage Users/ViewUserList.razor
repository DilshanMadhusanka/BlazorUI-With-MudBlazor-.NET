@page "/users-list"
@using Microsoft.IdentityModel.JsonWebTokens
@using MudBlazorUI.Auth_Service.Services
@using MudBlazorUI.Core.DTOs.Response
@using System.Net.Http.Json
@using System.Security.Claims
@inject IDialogService DialogService
@inject IAdminService adminService

@attribute [Authorize]

<div style="height:100%;margin:80px 40px 10px 40px;">
    <MudTable Height="70vh" Elevation="1" ServerData="@(new Func<TableState, Task<TableData<UserModelResponseDTO>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table">

        <ToolBarContent>
            <MudText Typo="Typo.h5">Members</MudText>
            <MudSpacer  />
            <div style="width:100%"></div>
            <MudTextField Style="width:300px;margin-right:10;" T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mr-0"></MudTextField>
        </ToolBarContent>

       
        <HeaderContent >
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="UserModelResponseDTO">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sign_field" T="UserModelResponseDTO">IsEmail Confirm</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="UserModelResponseDTO">Created Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="UserModelResponseDTO">Last Updated</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="UserModelResponseDTO">2FA Enabled</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="UserModelResponseDTO">Edit</MudTableSortLabel></MudTh>
            
            
        </HeaderContent>
        <RowTemplate >
           
           
             <MudTd  DataLabel="Title">@context.Email</MudTd>
             <MudTd DataLabel="Content">@context.EmailConfirmed</MudTd>
             <MudTd DataLabel="Date">@context.AddedDate</MudTd>
             <MudTd DataLabel="Content">@context.UpdateDate</MudTd>
             <MudTd DataLabel="Date">@context.TwoFactorEnabled</MudTd>
            <MudTd><MudButton OnClick="@(()=>OpenDialog(context))" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled">Edit</MudButton></MudTd>

        </RowTemplate>
        
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>


<MudDialog @bind-IsVisible="visiblePersonalDialog" Options="dialogOptions">

    <DialogContent>
        <EditUser User="UserModelResponseDTO"></EditUser>
        <div class="d-flex justify-content-end" style="display:flex;justify-content:end">

            <MudButton OnClick="CloseDialog1" Color="Color.Primary">Close</MudButton>


        </div>



    </DialogContent>

</MudDialog>



@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    private IEnumerable<UserModelResponseDTO> pagedData;
    private MudTable<UserModelResponseDTO> table;

    private int totalItems;
    private string searchString = "";
    private int totalUnreadItems = 0;
    private bool enableMarkAllAsReadBtn = false;

    //view Edit User
    public UserModelResponseDTO UserModelResponseDTO { get; set; }
    private bool visiblePersonalDialog = false;
    async void CloseDialog1() {
        visiblePersonalDialog = false;
        await table.ReloadServerData();

    }
    private DialogOptions dialogOptions = new() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };


    private  void OpenDialog(UserModelResponseDTO userModelResponseDTO)
    {
        UserModelResponseDTO = userModelResponseDTO;
        visiblePersonalDialog = true;


    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }



    private async Task<TableData<UserModelResponseDTO>> ServerReload(TableState state)
    {
        var user = (await AuthenticationState).User;
        var id = user?.Claims.FirstOrDefault(x => x.Type == ClaimTypes.NameIdentifier)?.Value;



        IEnumerable<UserModelResponseDTO> ? data = await adminService.GetAllUsersDetaiils(searchString);
        await Task.Delay(300);
        if (data == null)
        {
            
        }

        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();

        totalItems = data.Count();
        

        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Email);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.EmailConfirmed);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.AddedDate);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<UserModelResponseDTO> { TotalItems = totalItems, Items = pagedData };
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await table.ReloadServerData();
    }

    
}
