@page "/login-details"
@using Microsoft.IdentityModel.JsonWebTokens
@using MudBlazorUI.Auth_Service.DTOs.Response
@using MudBlazorUI.Auth_Service.Services
@using MudBlazorUI.Core.DTOs.Response
@using System.Net.Http.Json
@using System.Security.Claims

@inject IAdminService adminService

@attribute [Authorize]

<div style="height:100%;margin:80px 40px 10px 40px;">
    <MudTable Height="70vh" Elevation="1" ServerData="@(new Func<TableState, Task<TableData<UserLoginDeviceInfoResponse>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table">

        <ToolBarContent>
            <MudText Typo="Typo.h5">Members</MudText>
            <MudSpacer  />
            <div style="width:100%"></div>
            <MudTextField Style="width:300px;margin-right:10;" T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mr-0"></MudTextField>
        </ToolBarContent>

       
        <HeaderContent >
            <MudTh><MudTableSortLabel SortLabel="nr_field" T="UserLoginDeviceInfoResponse">Ip</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="sign_field" T="UserLoginDeviceInfoResponse">UserAgent</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="name_field" T="UserLoginDeviceInfoResponse">LoginDate</MudTableSortLabel></MudTh>
            
            
            
        </HeaderContent>
        <RowTemplate >

          

            <MudTd DataLabel="IP">@context.IP</MudTd>
            <MudTd DataLabel="Det">@context.UserAgentDetails</MudTd>
            <MudTd DataLabel="Date">@context.LoginDate</MudTd>
            
            
            
        </RowTemplate>
        
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>





@code {
    private IEnumerable<UserLoginDeviceInfoResponse> pagedData;
    private MudTable<UserLoginDeviceInfoResponse> table;
    private UserAgentDetailsDTO userAgentDetailsDTO;

    private int totalItems;
    private string searchString = "";
  

    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }



    private async Task<TableData<UserLoginDeviceInfoResponse>> ServerReload(TableState state)
    {
        



        IEnumerable<UserLoginDeviceInfoResponse>? data = await adminService.GetAllLoginDetails(searchString);
        await Task.Delay(300);
        if (data == null)
        {
            
        }

        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.IP.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.UserAgentDetails.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;

            return false;
        }).ToArray();

        totalItems = data.Count();
        

        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.IP);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.UserAgentDetails);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.LoginDate);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<UserLoginDeviceInfoResponse> { TotalItems = totalItems, Items = pagedData };
    }

    private async Task OnSearch(string text)
    {
        searchString = text;
        await table.ReloadServerData();
    }

    
}
