@page "/changepassword"
@using MudBlazor
@layout NoNavLayout
@using System.ComponentModel.DataAnnotations
@using MudBlazorUI.Core.DTOs.Request
@using Newtonsoft.Json
@attribute [Authorize]

<div class="page">
    <MudLayout>
        <div style="background-image: url('Assets/image4.JPG'); background-size: cover; background-position: center; height: 430px; width: 100%; position: relative;">
            <div style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center;">
                <MudImage Src="Assets/image3.png" Alt="UOR" Width="80" Height="100" Elevation="30" Class="rounded-lg" />
                <div style="display: flex; flex-direction: column; align-items: center; padding-left: 20px; padding-right: 20px;">
                    <MudText Typo="Typo.h3" Class="pa-2" Style="@($"color:{Colors.Grey.Lighten5}; font-weight: bold;")">FACULTY OF ENGINEERING</MudText>
                    <MudText Typo="Typo.h5" Class="pa-2" Style="@($"color:{Colors.Grey.Lighten5}; font-weight: bold;")">UNIVERSITY OF RUHUNA</MudText>
                </div>
                <MudImage Src="Assets/image2.png" Alt="UOR" Width="80" Height="100" Elevation="30" Class="rounded-lg" />
            </div>
        </div>
        <div style="display: flex; justify-content: center; position: relative; margin-top: -80px; margin-bottom: 100px; margin-left: -90px;">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid Justify="Justify.Center" Class="mt-n10 pa-20">
                    <MudItem Class="mx-auto">
                        <MudCard Outlined="true" Style="border-radius: 10px; width: 160%; mx-auto;">
                            <MudCardContent Class="pa-20">
                                <MudText Align="Align.Center" Style="@($"color:{Colors.Blue.Darken4}; padding-top: 10px;")" Typo="Typo.h4">
                                    <span style="font-weight: bold; font-family: 'Inter'; font-size: 22px;">Change Password</span>
                                </MudText>
                                <div class="mt-6">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px; ")" Typo="Typo.body1">Old Password</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.OldPassword" For="@(() => model.OldPassword)" LabelCentered="true" InputType="InputType.Password" />
                                </div>
                                <div class="mt-4">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px;")" Typo="Typo.body1"> New Password</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.NewPassword" For="@(() => model.NewPassword)" InputType="InputType.Password" />
                                </div>
                                <div class="mt-4 mb-4">
                                    <MudText Style="@($"color:{Colors.Shades.Black}; font-size: 13px; padding-left: 5px;")" Typo="Typo.body1"> Conform New Password</MudText>
                                    <MudTextField Style="@($"height: 40px; width: 100%; color: {Colors.Grey.Lighten1}; background-color: {Colors.Shades.White}; border-radius: 15px; font-size: 13px; margin-top: 10px;")" Class="mt-2" Variant="Variant.Outlined" @bind-Value="model.ConfirmNewPassword" For="@(() => model.ConfirmNewPassword)" InputType="InputType.Password" />
                                </div>
                                
                            </MudCardContent>
                            <MudCardActions Style="@($"padding: 2px 10px 10px 10px;")">
                                <MudButton @onclick="Submit" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Style="@($"width: 100%; height: 40px; border-radius: 7px; display: flex; justify-content: center; margin: auto; margin-bottom: 20px; margin-top: -10px;")">
                                    <span style="font-family: 'Inter'; font-size: 12px;">Change Password</span>
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </div>
    </MudLayout>
</div>

@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {


        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string OldPassword { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string NewPassword { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string ConfirmNewPassword { get; set; }
    }

    public bool Basic_CheckBox4 { get; set; } = true;

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }


    private async void Submit()
    {
        snackbar.Clear();
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
        snackbar.Clear();

        if(model.NewPassword != model.ConfirmNewPassword)
        {
            snackbar.Add("Confirm Password is not Match", Severity.Error);

            return;
        }
        ChangePasswordRequestDTO changePasswordRequestDTO = new ChangePasswordRequestDTO();
        changePasswordRequestDTO.OldPassword = model.OldPassword;
        changePasswordRequestDTO.NewPassword = model.NewPassword;
        var result = await accountService.ChangePassword(changePasswordRequestDTO);
        var responseMessage = await result.Content.ReadAsStringAsync();

        if (result.IsSuccessStatusCode)
        {


            snackbar.Add(responseMessage, Severity.Success);
        }
        else { snackbar.Add(responseMessage, Severity.Error); }

        await Task.Delay(2000);
        NavigationManager.Refresh(forceReload:false);

    }
}
